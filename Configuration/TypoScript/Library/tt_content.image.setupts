###################################
### RESPONSIVE IMAGES
###################################

tt_content.image.20{
    
    # preprocess images then render with regular CssStyledContentController->render_textpic
    userFunc = LEF\LefResponsiveImages\Controller\ResponsiveImagesController->render_textpic
    
    # handle frame width
    frames  < lib.responsiveImages.frames
    
    # html css selector of element to apply background to
    cssSelector = TEXT
    cssSelector.field = tx_images_selector
     
    image_compression.override = {$plugin.lef_responsive_images.compression}
    image_compression.override.if.isFalse.field = image_compression
    
    # image mode standard / artdirection / cssbackground
    imageMode = TEXT
    imageMode.field = tx_images_mode
    
    # set width as max image width for default rendering and noscript fallback
    width.data = register:width_lg
    width.override = {$plugin.lef_responsive_images.screen.md}
    width.override.if.isFalse.data = register:width_lg
    
    rendering{
    
        artdirection{
        
        }
        cssbackground {
            
        }
        
        noCaption {
            rowStdWrap.wrap = {$plugin.lef_responsive_images.wrap.row}
            lastRowStdWrap.wrap < .rowStdWrap.wrap
            noRowsStdWrap.wrap = {$plugin.lef_responsive_images.wrap.norow}
        }
        splitCaption{
            rowStdWrap.wrap = {$plugin.lef_responsive_images.wrap.row}
            lastRowStdWrap.wrap < .rowStdWrap.wrap
            noRowsStdWrap.wrap = $plugin.lef_responsive_images.wrap.norow}
        }
        globalCaption{
            rowStdWrap.wrap = {$plugin.lef_responsive_images.wrap.row}
            lastRowStdWrap.wrap < .rowStdWrap.wrap
            noRowsStdWrap.wrap = $plugin.lef_responsive_images.wrap.norow}
        }
        
    }
    
    
}

tt_content.image.20.1 {
    
    layout {
        default{
            element = <img src="###ABSREFPREFIX######SRC###" ###ALTPARAMS######SELFCLOSINGTAGSLASH###>            
        }
        srcset {
            element = <img sizes="###SRCSETSIZES###" ###PARAMS### srcset="###SOURCECOLLECTION###" src="###ABSREFPREFIX######SRC###"###ALTPARAMS######SELFCLOSINGTAGSLASH###>
            source = |*|###ABSREFPREFIX######SRC### ###WIDTH###w,|*|###ABSREFPREFIX######SRC### ###WIDTH###w
        }
        picture {
            element = <picture>###SOURCECOLLECTION###<img src="###ABSREFPREFIX######SRC###"###PARAMS######ALTPARAMS######SELFCLOSINGTAGSLASH###></picture>
            source = <source srcset="###ABSREFPREFIX######SRC###" media="###MEDIAQUERY###"###SELFCLOSINGTAGSLASH###>
            # removed width/height from source due to incorrect result with retina 
            # width="###WIDTH###" height="###HEIGHT###"
        }
        
        bootstrappackage {
            element (
            <img src="###BASE_URL###{$plugin.lef_responsive_images.loader.icon}" ###SOURCECOLLECTION######PARAMS######ALTPARAMS######SELFCLOSINGTAGSLASH###>
            <noscript>            
            ###DEBUG###
            <img src="###ABSREFPREFIX######SRC###"###PARAMS######ALTPARAMS######SELFCLOSINGTAGSLASH###>
            </noscript>
            )
            source = data-###DATAKEY###="###ABSREFPREFIX######SRC###"
            source.noTrimWrap = ; ;;
            source.noTrimWrap.splitChar = ;
        }
        
        cssbackground {
            element = <style>###CSS_SELECTOR###{background-position: center center; background-size:cover; background-repeat: no-repeat;} ###SOURCECOLLECTION###</style><!--[if lt IE 9 ]><style>###CSS_SELECTOR### { background:url("###BASE_URL######SRC###") no-repeat center top; filter: progid:DXImageTransform.Microsoft.AlphaImageLoader(src='###BASE_URL######SRC###',sizingMethod='scale'); -ms-filter: "progid:DXImageTransform.Microsoft.AlphaImageLoader( src='###BASE_URL######SRC###', sizingMethod='scale')";}</style> <![endif]-->
            source = @media only screen AND ###MEDIAQUERY### { ###CSS_SELECTOR###{ background-image:url("###BASE_URL######SRC###");} }
        }
        
    }
    
    layoutKey = {$styles.content.imgtext.layoutKey}
    
    sourceCollection >
    sourceCollection {
        
        # Start with biggest as browser pick up the first matching one
        
        # 1200 +
        lg {
        
			width{
				# register name of reference width for proportional width of image above text when image width is set
                # TODO : put into settings
				refWidth  = width_lg
                # register name of container width
                screen = {$plugin.lef_responsive_images.screen.xl}
				# adaptive number of columns (map image columns) 1,2,3,4,5,6
                numberOfColumns = 1,2,3,4,5,6
            }
            
            mediaQuery{
                min = {$plugin.lef_responsive_images.screen.lg}
            }
            
            dataKey =  bigger
        }
        # 992 - 1199
        md < .lg
        md {
            width {
                screen = {$plugin.lef_responsive_images.screen.lg}
            }
            mediaQuery{
                min = {$plugin.lef_responsive_images.screen.md}
                max = {$plugin.lef_responsive_images.screen.lg}
            }
            
            dataKey =  large
        }
        # 768 - 991
        sm < .lg
        sm {
           
            width {
                screen = {$plugin.lef_responsive_images.screen.md}
                numberOfColumns = 1,1,3,4,4,6
            }
            
            mediaQuery{
                min = {$plugin.lef_responsive_images.screen.sm}
                max = {$plugin.lef_responsive_images.screen.md}
            }
            
            dataKey =  medium
        }
        
        # 480 - 767
        xs < .lg
        xs{
            width {
                screen = {$plugin.lef_responsive_images.screen.sm}
                numberOfColumns = 1,1,3,2,2,3
            }
            
            mediaQuery{
                min = {$plugin.lef_responsive_images.screen.xs}
                max = {$plugin.lef_responsive_images.screen.sm}
            }
            
            dataKey =  small
        }
        
        # 0 - 479
        xxs < .lg
        xxs {
            
            width {
                screen = {$plugin.lef_responsive_images.screen.xs}
                # enforce image width to be full screen as image above text dosent make sense on such small devices
                disableUserDefinedWidth = 1
                disableImageAboveText   = 1
                withoutGutter = 0
                numberOfColumns = 1,1,1,1,1,1
            }
            
            mediaQuery{
                min > 
                max = {$plugin.lef_responsive_images.screen.xs}
            }
            
            dataKey =  xsmall
        }
    }
    
    params >
    params.stdWrap {
        cObject = COA
        cObject{
			
            # Class params
            10 = COA
            10 {
                10 = COA
                10{
                    10 = TEXT
                    10.value = lazyload
                   
                    stdWrap.if {
                        value  = bootstrappackage
                        equals = {$styles.content.imgtext.layoutKey}
                    }
                }
                
                # Images frames
                20 = CASE
                20{
                    key.field = layout
                    default = TEXT
                    default.value =
                    1 < .default
                    1.value = img-rounded
                    2 < .default
                    2.value = img-circle
                    stdWrap {
                        noTrimWrap = | ||
                        required = 1
                    }
                }
                
                stdWrap{
                    noTrimWrap =| class="|"|
                    required = 1
                }
            }
			
			# Preload data attribute
			20 =  TEXT
            20 {
                 value =  data-preload="true"
                 stdWrap {
                    noTrimWrap = | ||
                    if{
						isTrue.field = tx_images_loading
						value  = bootstrappackage
                        equals = {$styles.content.imgtext.layoutKey}
					}
                }
			}
                  
        }
    }
}  




tt_content.menu.20.news.1.NO.stdWrap2.cObject{
    19 =< lib.responsiveImages.frames
    20.layout.key.override = 17
    20.1 < tt_content.image.20.1
    20.1.sourceCollection{
        retina-lg.width.cObject.disableImageAboveText = 1
        retina-md.width.cObject.disableImageAboveText = 1
        retina-sm.width.cObject.disableImageAboveText = 1
        retina-xs.width.cObject.disableImageAboveText = 1
        retina-xxs.width.cObject.disableImageAboveText = 1
        lg.width.cObject.disableImageAboveText = 1
        md.width.cObject.disableImageAboveText = 1
        sm.width.cObject.disableImageAboveText = 1
        xs.width.cObject.disableImageAboveText = 1
        xxs.width.cObject.disableImageAboveText = 1
    }
    21 =<  lib.responsiveImages.restore
}