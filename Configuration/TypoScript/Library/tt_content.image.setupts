###################################
### RESPONSIVE IMAGES
###################################

tt_content.image.20{
  rendering{

    cssbackground {

    }

    noCaption {
      rowStdWrap.wrap = <div class="row"> | </div>
      lastRowStdWrap.wrap < .rowStdWrap.wrap
      noRowsStdWrap.wrap < .rowStdWrap.wrap
    }
    splitCaption{
      rowStdWrap.wrap = <div class="row"> | </div>
      lastRowStdWrap.wrap < .rowStdWrap.wrap
      noRowsStdWrap.wrap < .rowStdWrap.wrap
    }
    globalCaption{
      rowStdWrap.wrap = <div class="row"> | </div>
      lastRowStdWrap.wrap < .rowStdWrap.wrap
      noRowsStdWrap.wrap < .rowStdWrap.wrap
    }
  }

}

tt_content.image.20.1 {

    layout {
        srcset {
            element = <img ###PARAMS### srcset="###SOURCECOLLECTION###" src="###SRC###"###ALTPARAMS######SELFCLOSINGTAGSLASH###>
            source = |*|###SRC### ###WIDTH###w,|*|###SRC### ###WIDTH###w
        }
        picture {
            element = <picture>###SOURCECOLLECTION###<img src="###SRC###"###PARAMS######ALTPARAMS######SELFCLOSINGTAGSLASH###></picture>
            source = <source srcset="###SRC###" media="###MEDIAQUERY###"###SELFCLOSINGTAGSLASH###>
            ## removed width/height from source due to incorrect setting with retina
            ## width="###WIDTH###" height="###HEIGHT###"
        }

        bootstrappackage {
            element (
            <img src="typo3conf/ext/lef_responsive_images/Resources/Public/Images/ajax-loader.gif" ###SOURCECOLLECTION######PARAMS######ALTPARAMS######SELFCLOSINGTAGSLASH###>
            <noscript>
            <img src="###SRC###"###PARAMS######ALTPARAMS###/>
            </noscript>
            )
            source = data-###DATAKEY###="###SRC###"
            source.noTrimWrap = ; ;;
            source.noTrimWrap.splitChar = ;
        }

        cssbackground {
            element = <style>###PARAMS###{background-position: center center; background-size:cover; background-repeat: no-repeat;} ###SOURCECOLLECTION###</style><!--[if lt IE 9 ]><style>###PARAMS### { background:url("###SRC###") no-repeat center center; filter: progid:DXImageTransform.Microsoft.AlphaImageLoader(src='###SRC###',sizingMethod='scale'); -ms-filter: "progid:DXImageTransform.Microsoft.AlphaImageLoader( src='###SRC###', sizingMethod='scale')";}</style> <![endif]-->
            source = @media only screen AND ###MEDIAQUERY### { ###BACKGROUNDELEMENTID### { background-image:url("###SRC###");} }
        }

    }

    layoutKey = {$styles.content.imgtext.layoutKey}

    sourceCollection >
    sourceCollection {

        # Start with retina as browser pick up the first matching one

        # 1200 +
        retina-lg {

            if.isTrue = {$plugin.lef_responsive_images.retina.enable}

            width.stdWrap.cObject < lib.responsiveImages.image.width
            width.stdWrap.cObject.10{
                container.cObject.data = register:width_lg
                screen.cObject.override = {$plugin.lef_responsive_images.screen.xl}
            }

            maxW = < .width

            pixelDensity = {$plugin.lef_responsive_images.retina.pixeldensity}

            mediaQuery = @@@mediaQuery@@@
            mediaQuery.stdWrap.cObject < lib.responsiveImages.image.mediaQuery
            mediaQuery.stdWrap.cObject{
                10.value = {$plugin.lef_responsive_images.screen.lg}
                20.if.isTrue = 0
                30.10.if.isTrue = 0
                40.value = {$plugin.lef_responsive_images.retina.mediaquery}:{$plugin.lef_responsive_images.retina.pixeldensity}
            }

            backgroundElementID = @@@backgroundElementID@@@
            backgroundElementID.stdWrap{
                cObject = TEXT
                cObject{
                    field = uid
                    wrap = #c|
                }
            }

            dataKey =  retina-bigger
        }
        # 992 - 1199
        retina-md < .retina-lg
        retina-md {

            if.isTrue = {$plugin.lef_responsive_images.retina.enable}

            width.stdWrap.cObject.10{
                container.cObject.data = register:width_md
                screen.cObject.override = {$plugin.lef_responsive_images.screen.lg}
            }
            maxW = < .width

            mediaQuery.stdWrap.cObject{
                10.value = {$plugin.lef_responsive_images.screen.md}
                20.if.isTrue = 1
                30.10.value = {$plugin.lef_responsive_images.screen.lg}-1
                30.10.if.isTrue = 1
                40.value = {$plugin.lef_responsive_images.retina.mediaquery}:{$plugin.lef_responsive_images.retina.pixeldensity}
            }

            dataKey =  retina-large
        }
        # 768 - 991
        retina-sm < .retina-lg
        retina-sm {
            if.isTrue = {$plugin.lef_responsive_images.retina.enable}

            width.stdWrap.cObject.10{
                container.cObject.data = register:width_sm
                screen.cObject.override = {$plugin.lef_responsive_images.screen.md}
            }

            width.stdWrap.override.cObject < lib.responsiveImages.image.width
            width.stdWrap.override.cObject {

                stdWrap.if.isTrue = {$plugin.lef_responsive_images.enable.imageColumnsAdaptive}

                10{
                    container.cObject.data = register:width_sm
                    screen.cObject.override = {$plugin.lef_responsive_images.screen.md}
                }

                # width of images in columns could depends on breakpoints and number of columns
                # inspired by bootstrap_package image rendering

                30{

                    30 >
                    30 = CASE
                    30{
                        override >
                        value >
                        key{
                            field = imagecols
                            override = default
                            override.if{
                                value = 1
                                isGreaterThan.data = register:imageCount
                                negate = 1
                            }
                        }
                        default = TEXT
                        default.value = 1
                        2 < .default
                        3 < .default
                        3.value = 3
                        4 < .default
                        4.value = 4
                        6 < .default
                        6.value = 6
                        stdWrap.wrap = (|-1)
                    }
                }
                50 >
                50 < .30.30
                50.stdWrap.wrap = /|
            }

            maxW = < .width

            mediaQuery.stdWrap.cObject{
                10.value = {$plugin.lef_responsive_images.screen.sm}
                20.if.isTrue = 1
                30.10.value = {$plugin.lef_responsive_images.screen.md}-1
                30.10.if.isTrue = 1
                40.value = {$plugin.lef_responsive_images.retina.mediaquery}:{$plugin.lef_responsive_images.retina.pixeldensity}
            }
            dataKey =  retina-medium
        }

        # 480 - 767
        retina-xs < .retina-lg
        retina-xs{

            if.isTrue = {$plugin.lef_responsive_images.retina.enable}

            width.stdWrap.cObject.10{
                container.cObject.data = register:width_xs
                screen.cObject.override = {$plugin.lef_responsive_images.screen.sm}
                withoutGutter.cObject.override = 0
            }

            width.stdWrap.override.cObject < lib.responsiveImages.image.width
            width.stdWrap.override.cObject {

                stdWrap.if.isTrue = {$plugin.lef_responsive_images.enable.imageColumnsAdaptive}

                10{
                    container.cObject.data = register:width_xs
                    screen   = {$plugin.lef_responsive_images.screen.sm}
                }

                # width of images in columns could depends on breakpoints and number of columns
                # inspired by bootstrap_package image rendering

                30{
                    30 >
                    30 = CASE
                    30{
                        value >
                        override >
                        key{
                            field = imagecols
                            override = default
                            override.if{
                                value = 1
                                isGreaterThan.data = register:imageCount
                                negate = 1
                            }
                        }
                        default = TEXT
                        default.value = 1
                        2 < .default
            3 < .default
                        3.value = 3
                        4 < .default
                        4.value = 2
                        6 < .default
                        6.value = 3
                        stdWrap.wrap = (|-1)
                    }
                }
                50 < .30.30
                50.stdWrap.wrap = /|
            }

            maxW = < .width

            mediaQuery.stdWrap.cObject {
                10.value = {$plugin.lef_responsive_images.screen.xs}
                20.if.isTrue = 1
                30.10.value = {$plugin.lef_responsive_images.screen.sm}-1
                30.10.if.isTrue = 1
                40.value = {$plugin.lef_responsive_images.retina.mediaquery}:{$plugin.lef_responsive_images.retina.pixeldensity}
            }

            dataKey =  retina-small
        }

        # 0 - 479
        retina-xxs < .retina-lg
        retina-xxs {

            if.isTrue = {$plugin.lef_responsive_images.retina.enable}

            width.stdWrap.cObject.10{
                container.cObject.data = register:width_xxs
                screen.cObject.override = {$plugin.lef_responsive_images.screen.xs}
                # override user defined width by full width
                userDefinedWidth.cObject.override = 0
            }

            # text beside image dosen t make sense for sutch small device
            width.stdWrap.cObject.20.0.stdWrap.wrap >
            width.stdWrap.override.cObject < lib.responsiveImages.image.width
            width.stdWrap.override.cObject {

                stdWrap.if.isTrue = {$plugin.lef_responsive_images.enable.imageColumnsAdaptive}

                10{
                    container.cObject.data = register:width_xxs
                    screen   = {$plugin.lef_responsive_images.screen.xs}
                    userDefinedWidth.cObject.override = 0
                }

                # width of images in columns could depends on breakpoints and number of columns
                # inspired by bootstrap_package image rendering
                20.0.stdWrap.wrap >

                30{
                    30 >
                    30 = CASE
                    30{
                        value >
                        override >
                        key{
                            field = imagecols
                            override = default
                            override.if{
                                value = 1
                                isGreaterThan.data = register:imageCount
                                negate = 1
                            }
                        }
                        default = TEXT
                        default.value = 1
                        2 < .default
                        3 < .default
                        3.value = 3
                        4 < .default
                        4.value = 2
                        6 < .default
                        6.value = 3
                        stdWrap.wrap = (|-1)
                    }
                }
                50 < .30.30
                50.stdWrap.wrap = /|
            }
            maxW = < .width

            mediaQuery.stdWrap.cObject {
                10 >
                20 >
                30.10.value = {$plugin.lef_responsive_images.screen.xs}-1
                30.10.if.isTrue = 1
                40.value = {$plugin.lef_responsive_images.retina.mediaquery}:{$plugin.lef_responsive_images.retina.pixeldensity}
            }

            dataKey =  retina-xsmall
        }

        ## base
        lg < .retina-lg
        lg {
            if.isTrue = 1
            pixelDensity = 1
            mediaQuery.stdWrap.cObject.40 >
            dataKey = bigger
        }

        md < .retina-md
        md {
            if.isTrue = 1
            pixelDensity = 1
            mediaQuery.stdWrap.cObject.40 >
            dataKey = large
        }

        sm < .retina-sm
        sm{
            if.isTrue = 1
            pixelDensity = 1
            mediaQuery.stdWrap.cObject.40 >
            dataKey = medium
        }

        xs < .retina-xs
        xs{
            if.isTrue = 1
            pixelDensity = 1
            mediaQuery.stdWrap.cObject.40 >
            dataKey = small
        }

        xxs < .retina-xxs
        xxs {
            if.isTrue = 1
            pixelDensity = 1
            mediaQuery.stdWrap.cObject.40 >
            dataKey = xsmall
        }
    }

    params >
    params.stdWrap {
        cObject = COA
        cObject{
            # Class params
            10 = COA
            10 {
                10 = COA
                10{
                    10 = TEXT
                    10.value = lazyload
                    stdWrap.if {
                        value  = bootstrappackage
                        equals = {$styles.content.imgtext.layoutKey}
                    }
                }

                # Images frames
                30 = CASE
                30{
                    key.field = layout
                    default = TEXT
                    default.value =
                    1 < .default
                    1.value = img-rounded
                    2 < .default
                    2.value = img-circle
                    stdWrap {
                        noTrimWrap = | ||
                        required = 1
                    }
                }

                stdWrap{
                    noTrimWrap =| class="|"|
                    required = 1
                }
            }
            # Sizes params for srcset
            20  = COA
            20 {

                # lg
                120 < lib.responsiveImages.image.srcset
                120{
                    10.value = {$plugin.lef_responsive_images.screen.lg}
                    20 >
                    50 < lib.responsiveImages.image.screenWidth
                    50.10.value =  100*{register:width_lg}/{$plugin.lef_responsive_images.screen.lg}
                }
                # md
                130 < lib.responsiveImages.image.srcset
                130{
                    10.value = {$plugin.lef_responsive_images.screen.md}
                    30.10.value = {$plugin.lef_responsive_images.screen.lg} - 1
                    50 < lib.responsiveImages.image.screenWidth
                    50.10.value = 100*{register:width_md}/{$plugin.lef_responsive_images.screen.md}
                }
                # sm
                140 < lib.responsiveImages.image.srcset
                140{
                    10.value = {$plugin.lef_responsive_images.screen.sm}
                    30.10.value = {$plugin.lef_responsive_images.screen.md} - 1
                    50 < lib.responsiveImages.image.screenWidth
                    50.10.value = 100*{register:width_sm}/{$plugin.lef_responsive_images.screen.sm}
                }
                # xs
                150 < lib.responsiveImages.image.srcset
                150{
                    10.value = {$plugin.lef_responsive_images.screen.xs}
                    30.10.value = {$plugin.lef_responsive_images.screen.sm} - 1
                    50 < lib.responsiveImages.image.screenWidth
                    50.10.value = 100*{register:width_xs}/{$plugin.lef_responsive_images.screen.sm}
                }
                # xxs
                160 < lib.responsiveImages.image.srcset
                160{
                    10 >
                    20 >
                    30.10.value = {$plugin.lef_responsive_images.screen.xs} - 1
                    50 < lib.responsiveImages.image.screenWidth
                    50.10.value = 100*{register:width_xxs}/{$plugin.lef_responsive_images.screen.xs}
                }

                ### retina (rendering before but defined after)

                # lg
                20 < .120
                20{
                    stdWrap.if.isTrue = {$plugin.lef_responsive_images.retina.enable}
                    40.value = {$plugin.lef_responsive_images.retina.mediaquery}:{$plugin.lef_responsive_images.retina.pixeldensity}
                }
                # md
                30 < .130
                30{
                    stdWrap.if.isTrue = {$plugin.lef_responsive_images.retina.enable}
                    40.value = {$plugin.lef_responsive_images.retina.mediaquery}:{$plugin.lef_responsive_images.retina.pixeldensity}
                }
                # sm
                40 < .140
                40{
                    stdWrap.if.isTrue = {$plugin.lef_responsive_images.retina.enable}
                    40.value = {$plugin.lef_responsive_images.retina.mediaquery}:{$plugin.lef_responsive_images.retina.pixeldensity}
                }
                # xs
                50 < .150
                50{
                    stdWrap.if.isTrue = {$plugin.lef_responsive_images.retina.enable}
                    40.value = {$plugin.lef_responsive_images.retina.mediaquery}:{$plugin.lef_responsive_images.retina.pixeldensity}
                }
                # xxs
                60 < .160
                60{
                    stdWrap.if.isTrue = {$plugin.lef_responsive_images.retina.enable}
                    40.value = {$plugin.lef_responsive_images.retina.mediaquery}:{$plugin.lef_responsive_images.retina.pixeldensity}
                }

                stdWrap{
                    if{
                        value  = srcset
                        equals = {$styles.content.imgtext.layoutKey}
                    }
                    noTrimWrap = | sizes="|"|
                    required = 1
                }
            }
            30 = TEXT
            30  {
                value = data-preload="true"
                stdWrap {
                    noTrimWrap = | ||
                    if{
                        isTrue.if{
                          value = 1
                          equals.field = tx_images_loading
                        }
                        value  = bootstrappackage
                        equals = {$styles.content.imgtext.layoutKey}
                    }
                }
            }
        }
    }
}
